x1=NULL
x2=NULL
x3=NULL
x4=NULL
x1=data.frame(cbind(ar_long[ar_long$time==1,]$patient, ar_long[ar_long$time==1,]$expression))
colnames(x1)=c("patient","expression")
x2=data.frame(cbind(ar_long[ar_long$time==2,]$patient, ar_long[ar_long$time==2,]$expression))
colnames(x2)=c("patient","expression")
x3=data.frame(cbind(ar_long[ar_long$time==3,]$patient, ar_long[ar_long$time==3,]$expression))
colnames(x3)=c("patient","expression")
x4=data.frame(cbind(ar_long[ar_long$time==4,]$patient, ar_long[ar_long$time==4,]$expression))
colnames(x4)=c("patient","expression")
y1=Merge(x1,x2,x3,x4,id=~patient)
colnames(y1)[2:5]<-c("t1","t2","t3","t4")
y2=y1[is.na(y1$t1)==0,]
d=NULL
for(j in 1:dim(y2)[1])
{
if(sum(is.na(y2[j,]))>2)
{
d=c(d,j)
}
}
if(is.null(d)==F){
y2=y2[-d,]
}
m=c()
for(j in 1:dim(y2)[1])
{
if (is.na(y2$t4[j])==0){
m[j]=y2$t4[j]
}else if(is.na(y2$t3[j])==0){
m[j]=y2$t3[j]
}else
m[j]=y2$t2[j]
}
long_data=data.frame(cbind(y2$patient,m,y2$t1))
colnames(long_data)<-c("ID","y","t1")
long_data
surv_data1<-surv_data[surv_data$patient %in% long_data$ID,]
n1 <- nrow(long_data)
n2 <- nrow(surv_data1)
y.long <- c(long_data[,2], rep(NA, n2))
y.surv <- inla.surv(time = c(rep(NA, n1), surv_data1$sur_duration), event = c(rep(NA, n1), surv_data1$event))
Yjoint <- list(y.long, y.surv)
linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))),
l.t1=c(long_data[,3],rep(0,n2)))
ntime <- 1
random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)),
U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)),
U3 = c(rep(NA, n1), 1:n2))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(23,100,100,0), initial = c(-2.7,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(2,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)),
U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)),
U3 = c(rep(NA, n1), 1:n2))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(2,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(10,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(10,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
summary(joint.inla)
ar_long
a
fdata$gene
fdata$gene_name
gene_b=unique(fdata$gene_name)
gene_b
gene_b[205]
gene_b[204]
gene_b[206]
gene_b[207]
gene_b[202]
a=as.vector(unique(fdata$gene))
ar_result=NULL
ar_long=data.frame()
inla_frailty=c()
i=202
f=NULL
print(i)
long_data=data.frame()
ar_long=fdata[fdata$gene==a[i],]
x1=NULL
x2=NULL
x3=NULL
x4=NULL
ar_long
unique(ar_long$gene_name)
x1=data.frame(cbind(ar_long[ar_long$time==1,]$patient, ar_long[ar_long$time==1,]$expression))
colnames(x1)=c("patient","expression")
x2=data.frame(cbind(ar_long[ar_long$time==2,]$patient, ar_long[ar_long$time==2,]$expression))
colnames(x2)=c("patient","expression")
x3=data.frame(cbind(ar_long[ar_long$time==3,]$patient, ar_long[ar_long$time==3,]$expression))
colnames(x3)=c("patient","expression")
x4=data.frame(cbind(ar_long[ar_long$time==4,]$patient, ar_long[ar_long$time==4,]$expression))
colnames(x4)=c("patient","expression")
y1=Merge(x1,x2,x3,x4,id=~patient)
colnames(y1)[2:5]<-c("t1","t2","t3","t4")
y2=y1[is.na(y1$t1)==0,]
d=NULL
for(j in 1:dim(y2)[1])
{
if(sum(is.na(y2[j,]))>2)
{
d=c(d,j)
}
}
if(is.null(d)==F){
y2=y2[-d,]
}
m=c()
for(j in 1:dim(y2)[1])
{
if (is.na(y2$t4[j])==0){
m[j]=y2$t4[j]
}else if(is.na(y2$t3[j])==0){
m[j]=y2$t3[j]
}else
m[j]=y2$t2[j]
}
long_data=data.frame(cbind(y2$patient,m,y2$t1))
colnames(long_data)<-c("ID","y","t1")
surv_data1<-surv_data[surv_data$patient %in% long_data$ID,]
n1 <- nrow(long_data)
n2 <- nrow(surv_data1)
y.long <- c(long_data[,2], rep(NA, n2))
y.surv <- inla.surv(time = c(rep(NA, n1), surv_data1$sur_duration), event = c(rep(NA, n1), surv_data1$event))
Yjoint <- list(y.long, y.surv)
linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))),
l.t1=c(long_data[,3],rep(0,n2)))
ntime <- 1
random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)),
U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)),
U3 = c(rep(NA, n1), 1:n2))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(10,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
gene_frail_cox
library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(brinla)
gene_frail_cox
summary(gene_frail_cox)
fitsurv
gene_frail_cox
library(INLA)
inla.doc(gaussian)
inla.doc(prior)
inla.doc(what = "gaussain")
inla.doc(what = "gaussian")
library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(brinla)
output
View(coxdata1)
View(min_result_new)
View(pattern)
d_positive=pattern$gene_name[pattern$sd_of_random_part_aft %in% head(sort(pattern$sd_of_random_part_aft),10),]
d_positive=pattern[pattern$sd_of_random_part_aft %in% head(sort(pattern$sd_of_random_part_aft),10),]$gene_name
d_positive
View(pattern)
d_positive=pattern[pattern$sd_of_random_part_aft %in% head(sort(pattern$sd_of_random_part_aft),10) & pattern$cluster==1,]$gene_name
d_positive
d_positive=pattern[pattern[pattern$cluster==1,]$sd_of_random_part_aft %in% head(sort(pattern[pattern$cluster==1,]$sd_of_random_part_aft),10),]$gene_name
d_positive
pattern[pattern$cluster==1,]$sd_of_random_part_aft
d1=pattern[pattern$cluster==1,]
d1
d1=pattern[pattern$cluster==1,na.rm=T]
d1=na.omit(pattern[pattern$cluster==1,])
d1
d_positive=d1[d1$sd_of_random_part_aft %in% head(sort(d1$sd_of_random_part_aft),10),]$gene_name
d_positive
d1=na.omit(pattern[pattern$cluster==1,])
d2=na.omit(pattern[pattern$cluster==2,])
d_positive=d1[d1$sd_of_random_part_aft %in% head(sort(d1$sd_of_random_part_aft),10),]$gene_name
d_negative=d2[d2$sd_of_random_part_aft %in% head(sort(d2$sd_of_random_part_aft),10),]$gene_name
#min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1,]
#min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2,]
min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1 & min_result_cluster$gene_name %in% d1,]
min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2 & min_result_cluster$gene_name %in% d2,]
View(min_result_cluster_n)
min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2 && min_result_cluster$gene_name %in% d2,]
d1
#min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1,]
#min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2,]
min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1 && min_result_cluster$gene_name %in% d_positive,]
min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2 && min_result_cluster$gene_name %in% d_negative,]
#min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1,]
#min_result_cluster_n<-min_result_cluster[min_result_cluster$d ==2,]
min_result_cluster_p<-min_result_cluster[min_result_cluster$d ==1 || min_result_cluster$gene_name %in% d_positive,]
d_positive
d_negative
min_result_cluster$gene_name
min_result_cluster$gene_name %in% d_positive
min_result_cluster_p<-min_result_cluster[min_result_cluster$gene_name %in% d_positive,]
min_result_cluster_n<-min_result_cluster[min_result_cluster$gene_name %in% d_negative,]
View(min_result_cluster_n)
d_positive
d_negative
prog_gene<-rbind(min_result_cluster_p,min_result_cluster_n)
#####################################
progdata=newdata1[newdata1$time==1,]
pid=unique(newdata1$patient_id)
duration=progdata$duration_days
status<-as.numeric(progdata$date_of_local_relapse !=0 | progdata$date_of_metastatic_disease !=0)
status<-1-as.numeric(is.na(status))
progdata=progdata[,colnames(progdata) %in% prog_gene$gene_name]
progdata=cbind(pid,progdata,duration,status)
HR.result=data.frame()
for(i in 2:(dim(progdata)[2]-2))
{
pdata=progdata[progdata[,i]>0,]
model=coxph(Surv(duration,status)~pdata[,i],data=pdata)
prog.result=cbind(colnames(pdata)[i],exp(as.numeric(model$coefficients)))
HR.result=rbind(HR.result,prog.result)
}
HR.result[,2]=as.numeric(as.character(HR.result[,2]))
s=sum(HR.result[,2])
colnames(HR.result)=c("gene_name","HR")
check_data=merge(prog_gene,HR.result,by="gene_name")
progdata1<-progdata[apply(progdata[c(2:21)],1,function(z) !any(z==0)),]
p_percent=check_data$HR[check_data$d==1]/sum(check_data$HR[check_data$d==1])
n_percent=(1/check_data$HR[check_data$d==2])/sum(1/check_data$HR[check_data$d==2])
percent=c(p_percent,n_percent)
gene_name_p=prog_gene$gene_name[prog_gene$d==1]
gene_name_n=prog_gene$gene_name[prog_gene$d==2]
gene_name=c(as.character(gene_name_p),as.character(gene_name_n))
w=cbind(gene_name,percent)
check_data=merge(check_data,w,by="gene_name")
check_data$percent=as.numeric(as.character(check_data$percent))
prog_score=c()
for(i in 1:dim(progdata1)[1])
{
I1=0
I2=0
for(j in 2:(dim(progdata1)[2]-2))
{
print(c(i,j))
rhat=0
shat=0
l=colnames(progdata1[j])
k=check_data[check_data$gene_name==l,]$percent
m=check_data[check_data$gene_name==l,]$coef
cl=check_data[check_data$gene_name==l,]$d
ran=check_data[check_data$gene_name==l,]$range
mi=check_data[check_data$gene_name==l,]$min_value
if(cl==1)
{
r=k*((progdata1[i,j]-mi)/ran)
I1=r+I1
}else
{
s=k*((progdata1[i,j]-mi)/ran)
I2=s+I2
}
}
g=cbind(progdata1$pid[i],I1,I2,I1+I2)
prog_score=rbind(prog_score,g)
}
prog_score=cbind(prog_score,progdata1$duration,progdata1$status)
colnames(prog_score)=c("pid","prog_score_1","prog_score_2","sum_of_score","duration","status")
prog_score
write.csv(prog_score,"prog_score.csv")
check_data
write.csv(check_data,"check_data.csv")
### Brier Score ####
library(pec)
library(prodlim)
library(riskRegression)
Models <- list("Cox Model 1"=coxph(Surv(duration,status)~prog_score_1,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 2"=coxph(Surv(duration,status)~prog_score_2,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 3"=coxph(Surv(duration,status)~sum_of_score,data=prog_score,x=TRUE,y=TRUE))
#Models <- list("Estimated"=coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE))
f<-coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE,x=TRUE)
PredError <- pec(object=Models,formula=Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,exact=TRUE,cens.model="marginal",splitMethod="none",B=0,verbose=TRUE)
prog_score=data.frame(prog_score)
Models <- list("Cox Model 1"=coxph(Surv(duration,status)~prog_score_1,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 2"=coxph(Surv(duration,status)~prog_score_2,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 3"=coxph(Surv(duration,status)~sum_of_score,data=prog_score,x=TRUE,y=TRUE))
#Models <- list("Estimated"=coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE))
f<-coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE,x=TRUE)
PredError <- pec(object=Models,formula=Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,exact=TRUE,cens.model="marginal",splitMethod="none",B=0,verbose=TRUE)
print(PredError,times=seq(5,30,5))
summary(PredError)
plot(PredError,xlim=c(0,80),xlab="Days",title="Brier Score")
prog_score
Models <- list("Cox Model 1"=coxph(Surv(duration,status)~prog_score_1,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 2"=coxph(Surv(duration,status)~prog_score_2,data=prog_score,x=TRUE,y=TRUE),
"Cox Model 3"=coxph(Surv(duration,status)~sum_of_score,data=prog_score,x=TRUE,y=TRUE))
#Models <- list("Estimated"=coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE))
f<-coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE,x=TRUE)
PredError <- pec(object=Models,formula=Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,exact=TRUE,cens.model="marginal",splitMethod="none",B=0,verbose=TRUE)
print(PredError,times=seq(5,30,5))
summary(PredError)
plot(PredError,xlim=c(0,110),xlab="Days",title="Brier Score")
plot(PredError,xlim=c(0,110),xlab="Days",title="Brier Score")
plot(PredError,xlim=c(0,110),xlab="Days",title="Brier Score")
plot(PredError,xlim=c(0,110),xlab="Days",title="Brier Score")
PredError
View(prog_score)
pid
prog_score
View(min_result_new)
View(min_result_cluster)
write.csv
write.csv(min_result_cluster,header=T)
write.csv(min_result_cluster,"min_result_cluster.csv")
plot(PredError,xlim=c(0,80),xlab="Days")
median(pattern$sd_of_random_part_aft[pattern$cluster==1,])
library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(brinla)
median(pattern[pattern$cluster==1,]$sd_of_random_part_aft)
median(pattern[pattern$cluster==1,]$sd_of_random_part_aft,na.rm=T)
median(pattern[pattern$cluster==2,]$sd_of_random_part_aft,na.rm=T)
median(pattern[pattern$cluster==3,]$sd_of_random_part_aft,na.rm=T)
median(pattern[pattern$cluster==3,]$sd_of_random_part_cox,na.rm=T)
median(pattern[pattern$cluster==2,]$sd_of_random_part_cox,na.rm=T)
median(pattern[pattern$cluster==1,]$sd_of_random_part_cox,na.rm=T)
joint.inla
summary(joint.inla)
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.hyper, 4)
linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))),
l.t1=c(long_data[,3],rep(0,n2)))
ntime <- 1
random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)),
U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)),
U3 = c(rep(NA, n1), 1:n2))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(10,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","weibull"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","weibullsurv"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","weibull"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","weibullsurv"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","weibull"),data = joint.data, control.compute=list(dic=TRUE))
joint.inla <- inla(formula, family = c("gaussian","weibullsurv"),data = joint.data, control.compute=list(dic=TRUE))
linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))),
l.t1=c(long_data[,3],rep(0,n2)))
ntime <- 1
random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)),
U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)),
U3 = c(rep(NA, n1), 1:n2))
joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint
formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(10,10,10,0), initial = c(-1.5,0.9,-0.22), n=2*n2) +
f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
f(U3, model="iid")
joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)
min_result_cluster_n
HR.result
s
dim(progdata
)
View(progdata)
model
check_data
l
View(progdata1)
prog_score
Models
PredError
Models
plot(PredError,xlim=c(0,80),xlab="Days")
print(PredError,times=seq(5,30,5))
summary(PredError)
plot(PredError,xlim=c(0,80),xlab="Days")
xscore
plot(xscore)
plotBrier(xscore)
library(survival)
plotBrier(xscore)
plotBrier(xscore)
library(riskRegression)
plotBrier(xscore)
plotBrier(xscore)
xscore
View(fdata)
gene_frail_cox
gene_frail_cox$history
gene_frail_cox
ggene_frail_aft
gene_frail_aft
2+3
summary(gene_frail_aft)$table
q
p
pattern
install.packages("VIM")
library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(brinla)
### AFT frail using R-INLA ####
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
### AFT frail using R-INLA ####
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(INLA)
inla.update(testing=T)
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(INLA)
inla.update(testing=T)
setwd("E:/Study Time/Books/PhD/ISM/work/data 18-11-18_gene expression classification")
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
options(repos = c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"))
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(brinla)
### AFT frail using R-INLA ####
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
options(repos = c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"))
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/testing")
library(devtools)
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(INLA)
install.packages("INLA",
INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(brinla)
library(devtools)
install_github("julianfaraway/brinla")
library(devtools)
install_github("julianfaraway/brinla")
install.packages("Rtools")
install.packages("remotes")
remotes::install_github("julianfaraway/brinla")
2+2
setwd("E:/Study Time/Books/PhD/ISM/work/souvikbanerjee91.github.io")
